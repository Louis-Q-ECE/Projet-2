#include "bibli.h"

BITMAP *imageJ1; // image du joueur 1
BITMAP *imageJ2; // image du joueur 2

// structure pour representer les joueurs
typedef struct {
    int x, y; // position des joueurs sur le plateau
    int grabbed; // indicateur pour savoir si le joueur a attrape un bloc
    int grab_x, grab_y; // position du bloc attrape par le joueur
} Player;

// structure pour representer le bloc deplacable
typedef struct {
    int x, y; // position du bloc sur le plateau
    int grabbed; // indicateur pour savoir si le bloc est attrape
} Block;

// initialiser les joueurs
Player joueur1 = {GRID_SIZE, GRID_SIZE, 0, 0};
Player joueur2 = {SCREEN_WIDTH - GRID_SIZE - PLAYER_SIZE, SCREEN_HEIGHT - GRID_SIZE - PLAYER_SIZE, 0, 0};
int staticCube_x = SCREEN_WIDTH - GRID_SIZE * 2; // nouvelle position X du cube statique
int staticCube_y = GRID_SIZE; // nouvelle position Y du cube statique

// Initialiser le bloc déplaçable
Block movableBlock = {SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, 0};

// structure pour representer un bloc lâche
typedef struct {
    int x, y; // position du bloc lache sur le plateau
    int color; // couleur du bloc lache
} DroppedBlock;

#define MAX_DROPPED_BLOCKS 10 // nombre maximal de blocs laches pouvant etre stockes
DroppedBlock droppedBlocks[MAX_DROPPED_BLOCKS]; // liste des blocs laches
int numDroppedBlocks = 0; // nombre actuel de blocs laches

int colorChangeTimer = 0; // timer pour le changement de couleur du cube
int currentCubeColor; // declaration de la variable sans initialisation

// fonction pour supprimer le premier bloc lache
void supprimer_premier_bloc_lache() {
    for (int i = 0; i < numDroppedBlocks - 1; i++) {
        droppedBlocks[i] = droppedBlocks[i + 1];
    }
    numDroppedBlocks--;
}

int WinMain() {
    // initialisation
    allegro_init();
    install_keyboard();
    install_mouse();
    set_color_depth(32);
    set_gfx_mode(GFX_AUTODETECT_WINDOWED, SCREEN_WIDTH, SCREEN_HEIGHT, 0, 0);

    // initialisez currentCubeColor avec makecol ici
    currentCubeColor = makecol(255, 255, 0); // couleur initiale du cube

    // chargement des images des joueurs
    imageJ1 = load_bitmap("imageJ1.bmp", NULL);
    imageJ2 = load_bitmap("imageJ2.bmp", NULL);

    // fficher le menu cliquable avec l image
    afficher_menu();

    // creation d une bitmap temporaire pour le double tampon
    BITMAP *buffer = create_bitmap(SCREEN_WIDTH, SCREEN_HEIGHT);

    // boucle de jeu
    while (!key[KEY_ESC]) {
        // si la touche r est enfoncee afficher les regles
        if(key[KEY_R]) {
            afficher_regles();
            rest(1000);
        }

        

        // gestion des mouvements du joueur 2
        if (key[KEY_UP]) {
            // Vérifier si le joueur est sur le mur bleu avant de le déplacer vers le haut
            if (!(joueur2.x + PLAYER_SIZE >= 300 && joueur2.x <= 400 && joueur2.y - PLAYER_SPEED + PLAYER_SIZE >= 200 && joueur2.y - PLAYER_SPEED <= 250)) {
                joueur2.y -= PLAYER_SPEED;
            }
        }
        if (key[KEY_DOWN]) {
            // Vérifier si le joueur est sur le mur bleu avant de le déplacer vers le bas
            if (!(joueur2.x + PLAYER_SIZE >= 300 && joueur2.x <= 400 && joueur2.y + PLAYER_SPEED + PLAYER_SIZE >= 200 && joueur2.y + PLAYER_SPEED <= 250)) {
                joueur2.y += PLAYER_SPEED;
            }
        }
        if (key[KEY_LEFT]) {
            // Vérifier si le joueur est sur le mur bleu avant de le déplacer vers la gauche
            if (!(joueur2.x - PLAYER_SPEED + PLAYER_SIZE >= 300 && joueur2.x - PLAYER_SPEED <= 400 && joueur2.y + PLAYER_SIZE >= 200 && joueur2.y <= 250)) {
                joueur2.x -= PLAYER_SPEED;
            }
        }
        if (key[KEY_RIGHT]) {
            // Vérifier si le joueur est sur le mur bleu avant de le déplacer vers la droite
            if (!(joueur2.x + PLAYER_SPEED + PLAYER_SIZE >= 300 && joueur2.x + PLAYER_SPEED <= 400 && joueur2.y + PLAYER_SIZE >= 200 && joueur2.y <= 250)) {
                joueur2.x += PLAYER_SPEED;
            }
        }
        // gestion des mouvements du joueur 1
        if (key[KEY_W]) {
            // Vérifier si le joueur est sur le mur bleu avant de le déplacer vers le haut
            if (!(joueur1.x + PLAYER_SIZE >= 300 && joueur1.x <= 400 && joueur1.y - PLAYER_SPEED + PLAYER_SIZE >= 200 && joueur1.y - PLAYER_SPEED <= 250)) {
                joueur1.y -= PLAYER_SPEED;
            }
        }
        if (key[KEY_S]) {
            // Vérifier si le joueur est sur le mur bleu avant de le déplacer vers le bas
            if (!(joueur1.x + PLAYER_SIZE >= 300 && joueur1.x <= 400 && joueur1.y + PLAYER_SPEED + PLAYER_SIZE >= 200 && joueur1.y + PLAYER_SPEED <= 250)) {
                joueur1.y += PLAYER_SPEED;
            }
        }
        if (key[KEY_A]) {
            // Vérifier si le joueur est sur le mur bleu avant de le déplacer vers la gauche
            if (!(joueur1.x - PLAYER_SPEED + PLAYER_SIZE >= 300 && joueur1.x - PLAYER_SPEED <= 400 && joueur1.y + PLAYER_SIZE >= 200 && joueur1.y <= 250)) {
                joueur1.x -= PLAYER_SPEED;
            }
        }
        if (key[KEY_D]) {
            // Vérifier si le joueur est sur le mur bleu avant de le déplacer vers la droite
            if (!(joueur1.x + PLAYER_SPEED + PLAYER_SIZE >= 300 && joueur1.x + PLAYER_SPEED <= 400 && joueur1.y + PLAYER_SIZE >= 200 && joueur1.y <= 250)) {
                joueur1.x += PLAYER_SPEED;
            }
        }


        // limiter la position des joueurs dans les limites du plateau
        if (joueur1.x < GRID_SIZE) joueur1.x = GRID_SIZE;
        if (joueur1.x >= SCREEN_WIDTH - GRID_SIZE - PLAYER_SIZE) joueur1.x = SCREEN_WIDTH - GRID_SIZE - PLAYER_SIZE;
        if (joueur1.y < GRID_SIZE) joueur1.y = GRID_SIZE;
        if (joueur1.y >= SCREEN_HEIGHT - GRID_SIZE - PLAYER_SIZE) joueur1.y = SCREEN_HEIGHT - GRID_SIZE - PLAYER_SIZE;

        if (joueur2.x < GRID_SIZE) joueur2.x = GRID_SIZE;
        if (joueur2.x >= SCREEN_WIDTH - GRID_SIZE - PLAYER_SIZE) joueur2.x = SCREEN_WIDTH - GRID_SIZE - PLAYER_SIZE;
        if (joueur2.y < GRID_SIZE) joueur2.y = GRID_SIZE;
        if (joueur2.y >= SCREEN_HEIGHT - GRID_SIZE - PLAYER_SIZE) joueur2.y = SCREEN_HEIGHT - GRID_SIZE - PLAYER_SIZE;

        // verifier si le joueur 1 ou le joueur 2 attrape le bloc deplacable
        if (key[KEY_SPACE]) {
            if (!joueur1.grabbed && joueur1.x + PLAYER_SIZE >= movableBlock.x && joueur1.x <= movableBlock.x + GRID_SIZE && joueur1.y + PLAYER_SIZE >= movableBlock.y && joueur1.y <= movableBlock.y + GRID_SIZE) {
                joueur1.grabbed = 1;
                joueur1.grab_x = movableBlock.x;
                joueur1.grab_y = movableBlock.y;
            }
            if (!joueur2.grabbed && joueur2.x + PLAYER_SIZE >= movableBlock.x && joueur2.x <= movableBlock.x + GRID_SIZE && joueur2.y + PLAYER_SIZE >= movableBlock.y && joueur2.y <= movableBlock.y + GRID_SIZE) {
                joueur2.grabbed = 1;
                joueur2.grab_x = movableBlock.x;
                joueur2.grab_y = movableBlock.y;
            }
        }

        // mettre a jour la position du bloc eplacable tenu par le joueur 1
        if (joueur1.grabbed) {
            joueur1.grab_x = joueur1.x;
            joueur1.grab_y = joueur1.y;
            movableBlock.x = joueur1.grab_x;
            movableBlock.y = joueur1.grab_y;
        }
        // mettre a jour la position du bloc deplacable tenu par le joueur 2
        if (joueur2.grabbed) {
            joueur2.grab_x = joueur2.x;
            joueur2.grab_y = joueur2.y;
            movableBlock.x = joueur2.grab_x;
            movableBlock.y = joueur2.grab_y;
        }
        // mettre a jour la position du bloc deplacable tenu
        // gerer le lachement du bloc deplacable
        if (key[KEY_ENTER]) {
            if (numDroppedBlocks >= MAX_DROPPED_BLOCKS) {
                // supprimer le premier bloc lache pour faire de la place pour un nouveau bloc
                supprimer_premier_bloc_lache();
            }
            if (joueur1.grabbed) {
                joueur1.grabbed = 0;
                if (numDroppedBlocks < MAX_DROPPED_BLOCKS) {
                    // ajouter le nouveau bloc lache
                    droppedBlocks[numDroppedBlocks].x = movableBlock.x;
                    droppedBlocks[numDroppedBlocks].y = movableBlock.y;
                    droppedBlocks[numDroppedBlocks].color = currentCubeColor;
                    numDroppedBlocks++;
                }
            }
            if (joueur2.grabbed) {
                joueur2.grabbed = 0;
                if (numDroppedBlocks < MAX_DROPPED_BLOCKS) {
                    // ajouter le nouveau bloc lache
                    droppedBlocks[numDroppedBlocks].x = movableBlock.x;
                    droppedBlocks[numDroppedBlocks].y = movableBlock.y;
                    droppedBlocks[numDroppedBlocks].color = currentCubeColor;
                    numDroppedBlocks++;
                }
            }
        }

        // mettre à jour la position du bloc deplaçable sur le sol s il n est pas tenu
        if (!joueur1.grabbed && !joueur2.grabbed) {
            movableBlock.x = staticCube_x - PLAYER_SIZE;
            movableBlock.y = staticCube_y - PLAYER_SIZE;
        }

        // incrementer le timer de changement de couleur
        colorChangeTimer++;
        if (colorChangeTimer >= COLOR_CHANGE_INTERVAL) {
            // changer la couleur du cube
            currentCubeColor = makecol(rand() % 256, rand() % 256, rand() % 256);
            // reinitialiser le timer
            colorChangeTimer = 0;
        }

        // dessiner le plateau quadrille avec des blocs violets sur les extrémites droite et gauche,
        // et des bords verts sur les extremites hautes et basses sur la bitmap temporaire
        clear_bitmap(buffer); // Effacer la bitmap temporaire avant de redessiner
        for (int x = 0; x < SCREEN_WIDTH; x += GRID_SIZE) {
            for (int y = 0; y < SCREEN_HEIGHT; y += GRID_SIZE) {
                // dessiner des blocs violets sur les extremites droite et gauche
                if (x == 0 || x == SCREEN_WIDTH - GRID_SIZE) {
                    rectfill(buffer, x, y, x + GRID_SIZE, y + GRID_SIZE, makecol(255, 0, 255)); // Violet
                }
                    // dessiner des bords verts sur les extremites hautes et basses
                else if (y == 0 || y == SCREEN_HEIGHT - GRID_SIZE) {
                    rectfill(buffer, x, y, x + GRID_SIZE, y + GRID_SIZE, makecol(0, 255, 0)); // Vert
                }
                    // Dessiner un mur bleu au milieu avec un espace pour passer
                else if (y == 200 && x >= 300 && x <= 400) {
                    rectfill(buffer, x, y, x + GRID_SIZE, y + GRID_SIZE, makecol(0, 0, 255)); // bleu
                }
                else {
                    rectfill(buffer, x, y, x + GRID_SIZE, y + GRID_SIZE, makecol(192, 192, 192)); // Gris pour le reste du plateau
                }

                // dessiner une bordure noire autour de chaque bloc vert
                if (x == 0 || x == SCREEN_WIDTH - GRID_SIZE) {
                    rect(buffer, x, y, x + GRID_SIZE, y + GRID_SIZE, makecol(0, 0, 0));
                }
                    // dessiner une bordure noire autour de chaque bloc violet
                else if (y == 0 || y == SCREEN_HEIGHT - GRID_SIZE) {
                    rect(buffer, x, y, x + GRID_SIZE, y + GRID_SIZE, makecol(0, 0, 0));
                }
            }
        }

        // dessiner les blocs laches
        for (int i = 0; i < numDroppedBlocks; i++) {
            rectfill(buffer, droppedBlocks[i].x, droppedBlocks[i].y, droppedBlocks[i].x + GRID_SIZE, droppedBlocks[i].y + GRID_SIZE, droppedBlocks[i].color); // Utiliser la couleur stockée
        }

        // dessiner le bloc deplacable
        rectfill(buffer, movableBlock.x, movableBlock.y, movableBlock.x + GRID_SIZE, movableBlock.y + GRID_SIZE, currentCubeColor); // Utiliser la couleur actuelle du cube

        // dessiner les joueurs sur la bitmap temporaire
        draw_sprite(buffer, imageJ1, joueur1.x, joueur1.y);
        draw_sprite(buffer, imageJ2, joueur2.x, joueur2.y);

        // copier la bitmap temporaire sur l ecran
        blit(buffer, screen, 0, 0, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);

        // attendre un court instant pour limiter la vitesse de deplacement
        rest(5);
    }

    // liberation des ressources Allegro
    destroy_bitmap(buffer);
    destroy_bitmap(imageJ1);
    destroy_bitmap(imageJ2);
    allegro_exit();

    return 0;
}
